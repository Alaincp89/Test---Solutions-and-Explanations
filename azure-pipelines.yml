trigger:
  branches:
    include:
      - main

pool:
  name: AgentsDevops
  vmImage: 'ubuntu-latest'

steps:
- checkout: self

- script: |
    docker version
    minikube version
    kubectl version --client
  displayName: 'Check Docker, Minikube and kubectl Versions'

# Iniciar Minikube
- script: |
    minikube start
  displayName: 'Start Minikube'

# Verificar que Minikube estÃ© corriendo
- script: |
    minikube status
  displayName: 'Verify Minikube is running'

# Construir la imagen de Docker
- script: |
    if [[ "$(docker images -q miapp:1 2> /dev/null)" != "" ]]; then
      echo "Image miapp:1 exists. Deleting it..."
      docker rmi -f miapp:1
    else
      echo "Image miapp:1 does not exist. Skipping deletion."
    fi
    echo "Building new image miapp:1 ..."
    docker build -t miapp:1 .
  displayName: 'Build Docker Image'

# Validar que la imagen de Docker se haya creado correctamente
- script: |
    if [[ "$(docker images -q miapp:1 2> /dev/null)" != "" ]]; then
      echo "Image miapp:1 was created successfully."
    else
      echo "Error: Image miapp:1 was not created."
      exit 1
    fi
  displayName: 'Validate Docker Image Creation'  

# Subir la imagen de Docker a Minikube
- script: |
    eval $(minikube docker-env)
    docker build -t miapp:1 .
  displayName: 'Build Docker Image for Minikube'

# Aplicar el archivo de Kubernetes (Deployment y Service) en Minikube
- script: |
    kubectl apply -f kubernetes/k8s.yml
  displayName: 'Deploy to Minikube'

# Verificar el estado del pod y servicio en Minikube
- script: |
    kubectl get pods
    kubectl get svc
  displayName: 'Check Pods and Services'

